// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id_cliente    Int        @id @default(autoincrement())
  nome          String?    @db.VarChar(255)
  email         String     @unique @db.VarChar(255)
  senha         String     @db.VarChar(255)
  telefone      String?    @db.VarChar(15)
  data_cadastro DateTime   @default(now()) @map("data_cadastro")

  // Relacionamentos
  enderecos     Endereco[]
  carrinho      Carrinho?
  pedidos       Pedido[]

  @@map("cliente_tb")
}

model Produto {
  id_produto    Int             @id @default(autoincrement())
  nome          String          @db.VarChar(255)
  descricao     String?         @db.Text
  preco_base    Decimal         @db.Decimal(10, 2)
  estoque       Int
  marca         String?         @db.VarChar(100)
  categoria     String?         @db.VarChar(100)

  // Relacionamentos
  itensCarrinho ItemCarrinho[]
  itensPedido   ItemPedido[]

  @@map("produto_tb")
}

model Endereco {
  id_endereco   Int            @id @default(autoincrement())
  id_cliente    Int
  cep           String         @db.VarChar(9)
  rua           String         @db.VarChar(255)
  numero        String         @db.VarChar(10)
  bairro        String         @db.VarChar(255)
  complemento   String?        @db.VarChar(100)
  tipo          TipoEndereco

  // Chaves estrangeiras
  cliente       Cliente        @relation(fields: [id_cliente], references: [id_cliente])

  pedidos       Pedido[]       @relation("EntregaPedido") 
  entregas      Entrega[]      

  @@map("endereco_tb")
}

enum TipoEndereco {
  ENTREGA
  FATURAMENTO
}

model Carrinho {
  id_carrinho   Int            @id @default(autoincrement())
  id_cliente    Int            @unique 
  data_criacao  DateTime       @default(now()) @map("data_criacao")
  status        String        

  // Chaves estrangeiras
  cliente       Cliente        @relation(fields: [id_cliente], references: [id_cliente])

  // Relacionamentos
  itens         ItemCarrinho[]

  @@map("carrinho_tb")
}

model ItemCarrinho {
  id_carrinho       Int
  id_produto        Int
  quantidade        Int
  preco_unitario    Decimal         @db.Decimal(10, 2) @map("preco_unitario")

  // Chaves estrangeiras
  carrinho          Carrinho        @relation(fields: [id_carrinho], references: [id_carrinho])
  produto           Produto         @relation(fields: [id_produto], references: [id_produto])

  @@id([id_carrinho, id_produto])
  @@map("item_carrinho_tb")
}

model Pagamento {
  id_pagamento    Int             @id @default(autoincrement())
  forma_pagamento String          @db.VarChar(50) @map("forma_pagamento")
  status          StatusPagamento 
  valor_pago      Decimal         @db.Decimal(10, 2) @map("valor_pago")
  data_pagamento  DateTime        @default(now()) @map("data_pagamento")

  pedido          Pedido?

  @@map("pagamento_tb")
}

enum StatusPagamento {
  PENDENTE
  APROVADO
  RECUSADO
}

model Pedido {
  id_pedido             Int          @id @default(autoincrement())
  id_cliente            Int
  id_endereco_entrega   Int          @map("id_endereco_entrega") 
  id_pagamento          Int          @unique 
  data_pedido           DateTime     @default(now()) @map("data_pedido")
  valor_total           Decimal      @db.Decimal(10, 2) @map("valor_total")
  status_pedido         StatusPedido @map("status_pedido")

  // Chaves estrangeiras
  cliente               Cliente      @relation(fields: [id_cliente], references: [id_cliente])
  endereco_entrega      Endereco     @relation("EntregaPedido", fields: [id_endereco_entrega], references: [id_endereco])
  pagamento             Pagamento    @relation(fields: [id_pagamento], references: [id_pagamento])

  // Relacionamentos
  itens                 ItemPedido[]
  entrega               Entrega? 

  @@map("pedido_tb")
}

enum StatusPedido {
  PENDENTE
  PAGO
  EM_PROCESSAMENTO
  ENVIADO
  ENTREGUE
  CANCELADO
}

model ItemPedido {
  id_pedido             Int
  id_produto            Int
  quantidade            Int
  preco_unitario_pago   Decimal         @db.Decimal(10, 2) @map("preco_unitario_pago")

  // Chaves estrangeiras
  pedido                Pedido          @relation(fields: [id_pedido], references: [id_pedido])
  produto               Produto         @relation(fields: [id_produto], references: [id_produto])

  @@id([id_pedido, id_produto])
  @@map("item_pedido_tb")
}

model Entrega {
  id_entrega      Int             @id @default(autoincrement())
  id_pedido       Int             @unique 
  id_endereco     Int            
  tipo_envio      String          @map("tipo_envio")
  data_prevista   DateTime?       @map("data_prevista")
  data_envio      DateTime?       @map("data_envio")
  status_entrega  StatusEntrega   @map("status_entrega")
  rastreio        String?         @db.VarChar(50)

  // Chaves estrangeiras
  pedido          Pedido          @relation(fields: [id_pedido], references: [id_pedido])
  endereco        Endereco        @relation(fields: [id_endereco], references: [id_endereco])

  @@map("entrega_tb")
}

enum StatusEntrega {
  SEPARACAO
  EM_TRANSITO
  ENTREGUE
  ATRASADO
}
