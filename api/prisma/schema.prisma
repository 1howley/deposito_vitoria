// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    String   @id 
  email     String
  name      String?
  role      Role     @default(CUSTOMER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order[]
  Cart Cart[]
  Address Address[]

  @@map("users")
}

enum Role {
  CUSTOMER
  ADMIN
}

model Product {
  productId    Int        @id @default(autoincrement())
  name         String     @db.VarChar(255)
  description  String?    @db.Text
  basePrice    Decimal    @db.Decimal(10, 2)
  stock        Int
  brand        String?    @db.VarChar(100)
  category     String?    @db.VarChar(100)

  // Relations
  cartItems    CartItem[]
  orderItems   OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("produto_tb")
}

model Address {
  addressId   Int          @id @default(autoincrement())
  clientId    String
  zipCode     String       @db.VarChar(9)
  street      String       @db.VarChar(255)
  number      String       @db.VarChar(10)
  neighborhood String      @db.VarChar(255)
  complement  String?      @db.VarChar(100)
  type        AddressType

  // Foreign keys
  user        User         @relation(fields: [clientId], references: [userId])

  orders      Order[]      @relation("DeliveryOrder")
  deliveries  Delivery[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("endereco_tb")
}

enum AddressType {
  DELIVERY
  BILLING
}

model Cart {
  cartId      Int       @id @default(autoincrement())
  clientId    String       @unique
  createdAt   DateTime  @default(now()) @map("data_criacao")
  status      String

  user        User         @relation(fields: [clientId], references: [userId])
  items       CartItem[]

  updatedAt DateTime @updatedAt

  @@map("carrinho_tb")
}

model CartItem {
  cartId       Int
  productId    Int
  quantity     Int
  unitPrice    Decimal   @db.Decimal(10, 2) @map("preco_unitario")

  cart         Cart      @relation(fields: [cartId], references: [cartId])
  product      Product   @relation(fields: [productId], references: [productId])

  @@id([cartId, productId])
  @@map("item_carrinho_tb")
}

model Payment {
  paymentId    Int            @id @default(autoincrement())
  method       String         @db.VarChar(50) @map("forma_pagamento")
  status       PaymentStatus
  amountPaid   Decimal        @db.Decimal(10, 2) @map("valor_pago")
  paidAt       DateTime       @default(now()) @map("data_pagamento")

  order        Order?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pagamento_tb")
}

enum PaymentStatus {
  PENDING
  APPROVED
  DECLINED
}

model Order {
  orderId          Int          @id @default(autoincrement())
  clientId         String
  deliveryAddressId Int         @map("id_endereco_entrega")
  paymentId        Int          @unique
  orderedAt        DateTime     @default(now()) @map("data_pedido")
  totalAmount      Decimal      @db.Decimal(10, 2) @map("valor_total")
  status           OrderStatus  @map("status_pedido")

  user             User         @relation(fields: [clientId], references: [userId])
  deliveryAddress  Address      @relation("DeliveryOrder", fields: [deliveryAddressId], references: [addressId])
  payment          Payment      @relation(fields: [paymentId], references: [paymentId])

  items            OrderItem[]
  delivery         Delivery?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pedido_tb")
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  orderId      Int
  productId    Int
  quantity     Int
  paidUnitPrice Decimal   @db.Decimal(10, 2) @map("preco_unitario_pago")

  order        Order     @relation(fields: [orderId], references: [orderId])
  product      Product   @relation(fields: [productId], references: [productId])

  @@id([orderId, productId])
  @@map("item_pedido_tb")
}

model Delivery {
  deliveryId    Int          @id @default(autoincrement())
  orderId       Int          @unique
  addressId     Int
  shippingType  String       @map("tipo_envio")
  expectedAt    DateTime?    @map("data_prevista")
  shippedAt     DateTime?    @map("data_envio")
  status        DeliveryStatus @map("status_entrega")
  trackingCode  String?      @db.VarChar(50)

  order         Order        @relation(fields: [orderId], references: [orderId])
  address       Address      @relation(fields: [addressId], references: [addressId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("entrega_tb")
}

enum DeliveryStatus {
  PICKING
  IN_TRANSIT
  DELIVERED
  DELAYED
}
